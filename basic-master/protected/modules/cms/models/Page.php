<?php/** * This is the model class for table "cms_page". * * The followings are the available columns in table 'cms_page': * @property integer $id * @property string $key * @property string $title * @property string $content */class Page extends CActiveRecord {    public $keywords;    /**     * Returns the static model of the specified AR class.     * @return Page the static model class     */    public static function model($className = __CLASS__) {	return parent::model($className);    }    /**     * @return string the associated database table name     */    public function tableName() {	return '{{page}}';    }    /**     * @return array validation rules for model attributes.     */    public function rules() {	// NOTE: you should only define rules for those attributes that	// will receive user inputs.	return array(	    array('category_id, key, title, content', 'required'),	    array('key, title', 'length', 'max' => 200),	    array('language', 'safe'),	    // The following rule is used by search().	    // Please remove those attributes that should not be searched.	    array('id, key, title, content', 'safe', 'on' => 'search'),	);    }    /**     * @return array relational rules.     */    public function relations() {	// NOTE: you may need to adjust the relation name and the related	// class name for the relations automatically generated below.	return array(	    'category' => array(self::BELONGS_TO, 'Category', 'category_id'),	);    }    /**     * @return array customized attribute labels (name=>label)     */    public function attributeLabels() {	return array(	    'id' => 'ID',	    'category_id' => '分类',	    'category.name' => '分类',	    'key' => '单页URL',	    'title' => '标题',	    'content' => '内容',	    'language' => '语言',	    'keywords' => '关键字'	);    }    /**     * Retrieves a list of models based on the current search/filter conditions.     * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.     */    public function search() {	// Warning: Please modify the following code to remove attributes that	// should not be searched.	$criteria = new CDbCriteria;	$criteria->compare('id', $this->id);	$criteria->compare('key', $this->key, true);	$criteria->compare('title', $this->title, true);	$criteria->compare('content', $this->content, true);	return new CActiveDataProvider(get_class($this), array(	    'criteria' => $criteria,	));    }    public function Zh_cnSearch() {	// Warning: Please modify the following code to remove attributes that	// should not be searched.	$criteria = new CDbCriteria;	$criteria->condition = "language = 'zh_cn'";	$criteria->order = "id desc";	$criteria->compare('id', $this->id);	$criteria->compare('key', $this->key, true);	$criteria->compare('title', $this->title, true);	$criteria->compare('content', $this->content, true);	return new CActiveDataProvider(get_class($this), array(	    'criteria' => $criteria,	));    }    public function En_usSearch() {	// Warning: Please modify the following code to remove attributes that	// should not be searched.	$criteria = new CDbCriteria;	$criteria->condition = "language = 'en_us'";	$criteria->order = "id desc";	$criteria->compare('id', $this->id);	$criteria->compare('key', $this->key, true);	$criteria->compare('title', $this->title, true);	$criteria->compare('content', $this->content, true);	return new CActiveDataProvider(get_class($this), array(	    'criteria' => $criteria,	));    }    function behaviors() {	return array(	    'eavAttr' => array(		'class' => 'ext.behaviors.model.eav.EEavBehavior',		// Table that stores attributes (required)		'tableName' => 'eavAttr',		// model id column		// Default is 'entity'		'entityField' => 'entity',		// attribute name column		// Default is 'attribute'		'attributeField' => 'attribute',		// attribute value column		// Default is 'value'		'valueField' => 'value',		// Model FK name		// By default taken from primaryKey		'modelTableFk' => 'id',		// Array of allowed attributes		// All attributes are allowed if not specified		// Empty by default		'safeAttributes' => array('keywords', 'description'),		// Attribute prefix. Useful when storing attributes for multiple models in a single table		// Empty by default		'attributesPrefix' => '',	    )	);    }    public function getEav($attribute) {	$page = Page::model()->findByPk($this->id);       return $page->getEavAttribute($attribute);    }}